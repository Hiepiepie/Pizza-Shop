Index: Style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n/*resizing element base on size of window*/\r\n@media screen {\r\n  body {\r\n    width: 100%;\r\n  }\r\n  img{\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n img {\r\n  -webkit-animation: fadein 2s; /* Safari, Chrome and Opera > 12.1 */\r\n  -moz-animation: fadein 2s; /* Firefox < 16 */\r\n  -ms-animation: fadein 2s; /* Internet Explorer */\r\n  -o-animation: fadein 2s; /* Opera < 12.1 */\r\n  animation: fadein 2s;\r\n}\r\nheader{\r\n  animation: 1s ease-out slideInFromBtm;\r\n}\r\n@keyframes slideInFromBtm {\r\n  0% {\r\n    transform: translateY(-100%);\r\n  }\r\n  100% {\r\n    transform: translateY(0);\r\n  }\r\n}\r\n@keyframes fadein {\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n}\r\n\r\n/* Firefox < 16 */\r\n@-moz-keyframes fadein {\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n}\r\n\r\n/* Safari, Chrome and Opera > 12.1 */\r\n@-webkit-keyframes fadein {\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n}\r\n\r\n/* Internet Explorer */\r\n@-ms-keyframes fadein {\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n}\r\n\r\n/* Opera < 12.1 */\r\n@-o-keyframes fadein {\r\n  from { opacity: 0; }\r\n  to   { opacity: 1; }\r\n}\r\n\r\nbody{\r\n  background: url(\"bg.jpg\") no-repeat center center fixed ;\r\n  -webkit-background-size: cover;\r\n  -moz-background-size: cover;\r\n  -o-background-size: cover;\r\n  background-size: cover;\r\n  padding: 50px;\r\n\r\n\r\n}\r\n@media screen and (min-device-width: 1440px){\r\n  .text-responsive {\r\n    font-size: 1vw;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h2{\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h1{\r\n    font-size: 5rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n}\r\n@media screen and (min-device-width: 1024px){\r\n  .text-responsive {\r\n    font-size: 1.5vw;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h2{\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h1{\r\n    font-size: 5rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n}\r\n@media screen and (min-device-width: 768px){\r\n  .text-responsive {\r\n    font-size: 1.7vw;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h2{\r\n    font-size: 2rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h1{\r\n    font-size: 5rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n}\r\n@media screen and (max-device-width: 768px){\r\n  .text-responsive {\r\n    font-size: 3vw;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h2{\r\n    font-size: 1rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n  .text-responsive h1{\r\n    font-size: 5rem;\r\n    text-align: center;\r\n    font-family: 'Helvetica Neue', sans-serif;\r\n  }\r\n}\r\n.welcome{\r\n  font-size: 10rem;\r\n  text-align: center;\r\n  margin-top: 80px;\r\n  font-family: 'Helvetica Neue', sans-serif;\r\n}\r\n  .dropdown-menu {\r\n    right: auto !important;\r\n    left: 0 !important;\r\n  }\r\n\r\n\r\n\r\n\r\n/*hover effect, applied only to non-mobile device web-browser*/\r\n@media (hover: hover){ .hover {\r\n  overflow: hidden;\r\n  position: relative;\r\n  padding-bottom: 60%;\r\n}\r\n\r\n.hover-overlay {\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 90;\r\n  transition: all 0.4s;\r\n}\r\n\r\n.hover img {\r\n  width: 100%;\r\n  position: relative;\r\n  top: 0;\r\n  left: 0;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.hover-content {\r\n  position: relative;\r\n  z-index: 99;\r\n}\r\n\r\n\r\n/* pizza */\r\n.hover-1 img {\r\n  width: 105%;\r\n  position: relative;\r\n  top: 0;\r\n  left: -5%;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.hover-1-content {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  z-index: 99;\r\n  transition: all 0.4s;\r\n}\r\n\r\n.hover-1 .hover-overlay {\r\n  background: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.hover-1-description {\r\n  transform: translateY(0.5rem);\r\n  transition: all 0.4s;\r\n  opacity: 0;\r\n}\r\n\r\n.hover-1:hover .hover-1-content {\r\n  bottom: 2rem;\r\n}\r\n\r\n.hover-1:hover .hover-1-description {\r\n  opacity: 1;\r\n  transform: none;\r\n}\r\n\r\n.hover-1:hover img {\r\n  left: 0;\r\n}\r\n\r\n.hover-1:hover .hover-overlay {\r\n  opacity: 0;\r\n}\r\n}\r\n/*end hover effect*/\r\n\r\noption{\r\n  background: burlywood;\r\n  color: whitesmoke;\r\n\r\n}\r\nselect{\r\n  background: burlywood;\r\n}\r\noption:hover{\r\n  background: burlywood;\r\n  color: whitesmoke;\r\n}\r\n.cartCustomize {\r\n  background: burlywood;\r\n}\r\n#delete {\r\n  margin-top: 5px;\r\n}\r\n#deleteAll{\r\n  margin-top: 5px;\r\n}\r\n\r\n#alignBtn{\r\n  text-align:center\r\n}\r\n\r\n.navbar-toggler.in{\r\n  text-align: center;\r\n}\r\n.driverSection{\r\n  background: cornsilk ;\r\n}\r\n.bestelltnummer{\r\n  color: coral;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Style.css	(revision 3dc5434d9d0821d8228f87a1b94b8b174c1946fc)
+++ Style.css	(date 1592292258404)
@@ -255,7 +255,7 @@
   text-align: center;
 }
 .driverSection{
-  background: cornsilk ;
+  background: cornsilk;
 }
 .bestelltnummer{
   color: coral;
Index: DriverPage/driver.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\t// UTF-8 marker äöüÄÖÜß€\r\n/**\r\n * Class PageTemplate for the exercises of the EWA lecture\r\n * Demonstrates use of PHP including class and OO.\r\n * Implements Zend coding standards.\r\n * Generate documentation with Doxygen or phpdoc\r\n * \r\n * PHP Version 7\r\n *\r\n * @file     PageTemplate.php\r\n * @package  Page Templates\r\n * @author   Bernhard Kreling, <bernhard.kreling@h-da.de> \r\n * @author   Ralf Hahn, <ralf.hahn@h-da.de> \r\n * @version  2.0 \r\n */\r\n\r\n// to do: change name 'PageTemplate' throughout this file\r\nrequire_once '../Page.php';\r\n\r\n/**\r\n * This is a template for top level classes, which represent \r\n * a complete web page and which are called directly by the user.\r\n * Usually there will only be a single instance of such a class. \r\n * The name of the template is supposed\r\n * to be replaced by the name of the specific HTML page e.g. baker.\r\n * The order of methods might correspond to the order of thinking \r\n * during implementation.\r\n \r\n * @author   Bernhard Kreling, <bernhard.kreling@h-da.de> \r\n * @author   Ralf Hahn, <ralf.hahn@h-da.de> \r\n */\r\nclass Driver extends Page\r\n{\r\n    // to do: declare reference variables for members\r\n    private $ifDataReceived = false;\r\n\r\n    /**\r\n     * Instantiates members (to be defined above).\r\n     * Calls the constructor of the parent i.e. page class.\r\n     * So the database connection is established.\r\n     *\r\n     * @throws Exception\r\n     */\r\n    protected function __construct() \r\n    {\r\n        parent::__construct();\r\n        // to do: instantiate members representing substructures/blocks\r\n    }\r\n\r\n    /**\r\n     * Cleans up what ever is needed.\r\n     * Calls the destructor of the parent i.e. page class.\r\n     * So the database connection is closed.\r\n     *\r\n     * @return void\r\n     */\r\n    public function __destruct() \r\n    {\r\n        parent::__destruct();\r\n    }\r\n\r\n    /**\r\n     * Fetch all data that is necessary for later output.\r\n     * Data is stored in an easily accessible way e.g. as associative array.\r\n     *\r\n     * @return array\r\n     * @throws Exception\r\n     */\r\n    protected function getViewData()\r\n    {\r\n        $orders = array();\r\n        $sqlQuery = \"SELECT ordered_articles.id, ordering.id as orderID, article.name, ordered_articles.status FROM ordering JOIN ordered_articles ON ordering.id = ordered_articles.f_order_id JOIN\r\n            article ON ordered_articles.f_article_id = article.id ORDER BY ordered_articles.id\";\r\n        $recordset = $this->_database->query($sqlQuery);\r\n        if (!$recordset)\r\n            throw new Exception(\"Fehler in Abfrage: \" . $this->_database->error);\r\n        while ($record = $recordset->fetch_assoc()) {\r\n            $id = $record[\"id\"];\r\n            $orderID = $record[\"orderID\"];\r\n            $name = $record[\"name\"];\r\n            $status = $record[\"status\"];\r\n            //array for\r\n            $order = array($orderID, $name, $status);\r\n            $orders[$id] = $order;\r\n        }\r\n        $recordset->free();\r\n\r\n        $orderDetails = array();\r\n        $sql = \"SELECT ordered_articles.f_order_id, SUM(article.price) as total, ordering.address FROM ordered_articles JOIN article \r\n                ON f_article_id = article.id JOIN ordering on ordering.id = ordered_articles.f_order_id GROUP by ordered_articles.f_order_id\";\r\n        $recordset = $this->_database->query($sql);\r\n        if (!$recordset)\r\n            throw new Exception(\"Fehler in Abfrage: \" . $this->_database->error);\r\n\r\n        while ($record = $recordset->fetch_assoc()) {\r\n            $orderID = $record[\"f_order_id\"];\r\n            $total = $record[\"total\"];\r\n            $address = $record[\"address\"];\r\n            //array for\r\n            $ordersDetail = array($total,$address);\r\n            $orderDetails[$orderID] = $ordersDetail;\r\n        }\r\n        $recordset->free();\r\n\r\n        return array($orders,$orderDetails);\r\n    }\r\n\r\n    /**\r\n     * First the necessary data is fetched and then the HTML is\r\n     * assembled for output. i.e. the header is generated, the content\r\n     * of the page (\"view\") is inserted and -if avaialable- the content of\r\n     * all views contained is generated.\r\n     * Finally the footer is added.\r\n     *\r\n     * @return void\r\n     * @throws Exception\r\n     */\r\n    protected function generateView() \r\n    {\r\n        $this->getViewData();\r\n        $this->generatePageHeader('Fahrer');\r\n        // to do: call generateView() for all members\r\n        // to do: output view of this page\r\n        $dataArray = $this->getViewData();\r\n        $orders = $dataArray[0];\r\n        $orderDetails = $dataArray[1];\r\n\r\n        echo <<<EOT\r\n        <nav class=\"navbar bg-dark navbar-dark fixed-top navbar-expand-md \" >\r\n         <section class=\"container-fluid\">  \r\n                 <section class=\"container \" ><a class=\"navbar-brand\" href=\"../../../index.php\">Clumsy Pizzas</a></section>\r\n                 \r\n                  <section id=\"collapsibleNavbar\" class=\"navbar-collapse collapse w-100\">\r\n                  <ul class=\"navbar-nav ml-auto\">\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"../OrderPage/order.php\">Bestellung</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"../CustomerPage/customer.php\">Kunde</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"#\">Fahrer</a>\r\n                    </li>\r\n                    <li class=\"nav-item\">\r\n                      <a class=\"nav-link\" href=\"../BakerPage/baker.php\">Baeker</a>\r\n                    </li></ul></section> \r\n                    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                     </button>            \r\n                </section>            \r\n                </nav>     \r\n        <section class=\"container \">\r\n        <section class=\"container-fluid py-5\">\r\n        <section class=\"container driverSection\" style=\"margin-top: 80px\">\r\n        <h1 class=\"text-responsive font-weight-bold text-muted\">Lieferung Status</h1>\r\n        <form id=\"formIdDriver\" action=\"driver.php\" accept-charset=\"UTF-8\" method=\"post\">\r\n        EOT;\r\n        foreach ($orderDetails as $orderId => $orderDetail) {\r\n            $formattedTotal = htmlspecialchars(number_format($orderDetail[0], 2));\r\n            $stats = array();\r\n            $names = array();\r\n            foreach ($orders as $id => $order) {\r\n                $orderID = htmlspecialchars($order[0]);\r\n                $name = htmlspecialchars($order[1]);\r\n                $status = htmlspecialchars($order[2]);\r\n\r\n                if ($orderID == $orderId) {\r\n                    array_push($stats, $status);\r\n                    array_push($names, $name);\r\n                }\r\n            }\r\n            $inDelivery = 0;\r\n            $finish = 0;\r\n            $delivered = 0;\r\n            foreach ($stats as $status) {\r\n                switch ($status){\r\n                    case 2:{\r\n                        $finish++;\r\n                        break;\r\n                    }\r\n                    case 3:{\r\n                        $inDelivery++;\r\n                        break;\r\n                    }\r\n                    case 4:{\r\n                        $delivered++;\r\n                        break;\r\n                    }\r\n                    default:break;\r\n                }\r\n            }\r\n\r\n            switch (count($stats)){\r\n                case $finish:{\r\n                    echo <<< EOT\r\n                    \r\n                    <h3 class=\"text-responsive bestelltnummer\">Bestellungnummer {$orderId}</h3>\r\n                    <p class=\"text-responsive\">Adresse: {$orderDetail[1]} <br>Total : {$formattedTotal} &euro;<br> Pizzas : \r\n                    EOT;\r\n                    foreach ($names as $pizzas => $pizza)\r\n                        echo \"{$pizza}, \";\r\n                    echo <<< EOT\r\n                    <br>\r\n                    <label class=\"text-responsive\" for=$orderId.1><br>Finish</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.1 value=\"2\" onclick=\"document.forms['formIdDriver'].submit()\" checked/><br>\r\n                    <label class=\"text-responsive\" for=$orderId.2>In Delivery</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.2 value=\"3\" onclick=\"document.forms['formIdDriver'].submit()\"/><br>\r\n                    <label class=\"text-responsive\"  for=$orderId.3>Delivered</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.3 value=\"4\" onclick=\"document.forms['formIdDriver'].submit()\"/><br> \r\n                    </p>\r\n                    \r\n                    EOT;\r\n                    break;\r\n                }\r\n                case $inDelivery:{\r\n                    echo <<< EOT\r\n                    <section>\r\n                    <h3 class=\"text-responsive\"> Bestellungnummer {$orderId}</h3>\r\n                    <p class=\"text-responsive\">Adresse: {$orderDetail[1]} <br>Total : {$formattedTotal} &euro;<br> Pizzas : \r\n                    EOT;\r\n                    foreach ($names as $pizzas => $pizza)\r\n                        echo \"{$pizza}, \";\r\n                    echo <<< EOT\r\n                    <br>\r\n                    <label class=\"text-responsive\" for=$orderId.1><br>Finish</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.1 value=\"2\" onclick=\"document.forms['formIdDriver'].submit()\"/><br>\r\n                    <label class=\"text-responsive\" for=$orderId.2>In Delivery</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.2 value=\"3\" onclick=\"document.forms['formIdDriver'].submit()\" checked/><br>\r\n                    <label class=\"text-responsive\" for=$orderId.3>Delivered</label>\r\n                    <input type=\"radio\" name='statuses[{$orderId}]' id=$orderId.3 value=\"4\" onclick=\"document.forms['formIdDriver'].submit()\"/><br>  \r\n                    </section> \r\n                    EOT;\r\n                    break;\r\n                }\r\n                case $delivered:{\r\n//                    echo \"<p style='color: cornflowerblue'> DELIVERED !</p>\";\r\n                    break;\r\n                }\r\n                default:\r\n//                    echo \"<p style='color: red'>NOT READY !</p>\";\r\n                    break;\r\n            }\r\n        }\r\n        echo <<< EOT\r\n        <br>\r\n        </form>\r\n        </section>      \r\n        EOT;\r\n        $this->generatePageFooter();\r\n    }\r\n\r\n    /**\r\n     * Processes the data that comes via GET or POST i.e. CGI.\r\n     * If this page is supposed to do something with submitted\r\n     * data do it here.\r\n     * If the page contains blocks, delegate processing of the\r\n     * respective subsets of data to them.\r\n     *\r\n     * @return void\r\n     * @throws Exception\r\n     */\r\n    protected function processReceivedData() \r\n    {\r\n        parent::processReceivedData();\r\n        // to do: call processReceivedData() for all members\r\n        if (isset($_POST['statuses'])){\r\n            $statuses = $_POST['statuses'];\r\n            $this->_database->query(\"Begin Transaction;\");\r\n            $this->_database->query(\"Lock Table ordered_articles Write;\");\r\n            foreach($statuses as $id => $status){\r\n                $sqlQuery =\"UPDATE ordered_articles SET status = $status WHERE f_order_id = $id\";\r\n                $recordset = $this->_database->query($sqlQuery);\r\n                if (!$recordset) {\r\n                    throw new Exception(\"Query failed!\" . $this->_database->error);\r\n                }\r\n            }\r\n            $this->ifDataReceived = true;\r\n            $this->_database->query(\"Unlock Tables;\");\r\n            $this->_database->query(\"Commit;\");\r\n            header(\"Location: \" . $_SERVER['REQUEST_URI']);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This main-function has the only purpose to create an instance\r\n     * of the class and to get all the things going.\r\n     * I.e. the operations of the class are called to produce\r\n     * the output of the HTML-file.\r\n     * The name \"main\" is no keyword for php. It is just used to\r\n     * indicate that function as the central starting point.\r\n     * To make it simpler this is a static function. That is you can simply\r\n     * call it without first creating an instance of the class.\r\n     *\r\n     * @return void\r\n     */\r\n    public static function main() \r\n    {\r\n        try {\r\n            $page = new Driver();\r\n            $page->processReceivedData();\r\n            $page->generateView();\r\n\r\n        }\r\n        catch (Exception $e) {\r\n            header(\"Content-type: text/plain; charset=UTF-8\");\r\n            echo $e->getMessage();\r\n        }\r\n    }\r\n}\r\n\r\n// This call is starting the creation of the page. \r\n// That is input is processed and output is created.\r\nDriver::main();\r\n\r\n// Zend standard does not like closing php-tag!\r\n// PHP doesn't require the closing tag (it is assumed when the file ends). \r\n// Not specifying the closing ? >  helps to prevent accidents \r\n// like additional whitespace which will cause session \r\n// initialization to fail (\"headers already sent\"). \r\n//? >
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- DriverPage/driver.php	(revision 3dc5434d9d0821d8228f87a1b94b8b174c1946fc)
+++ DriverPage/driver.php	(date 1592290650858)
@@ -80,7 +80,8 @@
             $name = $record["name"];
             $status = $record["status"];
             //array for
-            $order = array($orderID, $name, $status);
+            $order = array( $orderID, $name, $status);
+
             $orders[$id] = $order;
         }
         $recordset->free();
